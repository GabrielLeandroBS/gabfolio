@use "../variables.module.scss" as variables;

/* ------------------------------------------------------------ *\
  Mixins Core
  @see https://sass-lang.com/documentation/at-rules/mixin
\* ------------------------------------------------------------ */

// IE10+ selector. See http://browserhacks.com/
@mixin ie-gte-10 {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}

// Headings selector (target all headings).
@mixin headings() {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  .h1,
  .h2,
  .h3,
  .h4,
  .h5,
  .h6,
  .heading,
  .title,
  .subtitle {
    @content;
  }
}

// Set horizontal padding.
@mixin padding-x($value) {
  padding-left: $value;
  padding-right: $value;
}

// Set vertical padding.
@mixin padding-y($value) {
  padding-bottom: $value;
  padding-top: $value;
}

// Set horizontal margin.
@mixin margin-x($value) {
  margin-left: $value;
  margin-right: $value;
}

// Set vertical margin.
@mixin margin-y($value) {
  margin-bottom: $value;
  margin-top: $value;
}

// Set font size and line height.
@mixin font-size-line-height($font-size, $line-height) {
  font-size: $font-size;
  line-height: ($line-height / $font-size);
}

// Set width and height of the same size.
@mixin width-height($size) {
  height: $size;
  width: $size;
}

// Remove the default select appearance.
@mixin remove-select-appearance() {
  appearance: none;
  border: 0;

  &::-ms-expand {
    display: none;
  }

  &:focus {
    outline: 0;
  }
}

// Remove style from a list.
@mixin list-unstyled() {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Display a list as inline.
@mixin list-inline($li-margin-right: $list-inline-padding) {
  @include list-unstyled();

  li {
    display: inline-block;

    &:not(:last-child) {
      margin-right: $li-margin-right;
    }
  }
}

// Completely remove the link appearance.
@mixin link-unstyled {
  &,
  &:hover {
    color: inherit;
    text-decoration: none;
  }
}

// Set image as background cover.
@mixin cover($url, $position: center center) {
  background-image: url($url);
  background-position: $position;
  background-repeat: no-repeat;
  background-size: cover;
}

// Position the element and fill its parent.
@mixin position-fill($position: absolute) {
  height: 100%;
  left: 0;
  position: $position;
  top: 0;
  width: 100%;
}

// Position the element absolutely centered.
@mixin position-absolute-center() {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

// Position the element absolutely center horizontal.
@mixin position-absolute-center-x() {
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
}

// Position the element absolutely center vertical.
@mixin position-absolute-center-y() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// Similar to Bootstrap's fixed top, but with optional position.
@mixin position-top($position, $zindex: $zindex-fixed) {
  left: 0;
  position: $position;
  right: 0;
  top: 0;
  z-index: $zindex;
}

// Render a circle.
@mixin circle($width, $background-color: "") {
  @include width-height($width);
  border-radius: 100%;

  @if $background-color != "" {
    background-color: $background-color;
  }
}

// Set the top property after the admin bar if it's present.
@mixin top-after-admin-bar($offset: 0, $mobile-offset: 0) {
  .admin-bar & {
    top: 32px + $offset;

    @media screen and (max-width: 782px) {
      top: 46px + $mobile-offset;
    }
  }
}

// Background support for elements that use the background component.
@mixin background-support {
  position: relative;

  > .container {
    position: relative;
  }
}

@mixin image-size($size: cover) {
  height: 100%;
  object-fit: $size;
  width: 100%;
}

@mixin flex-center {
  align-items: center;
  display: flex;
  justify-content: center;
}

@mixin center-block($width) {
  @include margin-x(auto);
  max-width: $width;
}

@mixin has-hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

/* ------------------------------------------------------------ *\
  Mixins Breakpoints
  @see https://sass-lang.com/documentation/at-rules/mixin
\* ------------------------------------------------------------ */

@mixin from-breakpoint($breakpoint) {
  $breakpoint-width: map-get(variables.$breakpoints, $breakpoint);

  @if $breakpoint-width == 0px {
    @content;
  } @else {
    @media (min-width: $breakpoint-width) {
      @content;
    }
  }
}

/* ------------------------------------------------------------ *\
  Mixins for buttons
  @see https://sass-lang.com/documentation/at-rules/mixin
\* ------------------------------------------------------------ */

// Completely remove the default button appearance.
@mixin remove-button-appearance() {
  appearance: none;
  background: none;
  border: 0;
  color: inherit;
  font: inherit;
  outline: inherit;
  padding: 0;

  &:focus {
    outline: 0;
  }
}

@mixin btn {
  cursor: pointer;
  display: inline-block;
  text-align: center;
  text-decoration: none;
  transform-style: preserve-3d;
  transition-property: background-color, color, transform, width, font-weight;
  transition-duration: 0.3;
  transition-timing-function: ease;
  user-select: none;
  vertical-align: middle;
  will-change: background-color;
}
